#ifndef MAZE_H
#define MAZE_H

#define BOARD_X 31
#define BOARD_Y 28

#include <iostream>

struct coords {
  int x;
  int y;
};

class Maze {
 private:
  int matrix[BOARD_X][BOARD_Y] = {
      {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 50, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 50, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
       10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 0,  -1,
       -1, 0,  -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 0,  -1,
       -1, 0,  -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
       -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, 0,  0,  0,
       0,  0,  0,  -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {0, 0, 0, 0,  0, 0, 10, 0,  0, 0, -1, 0, 0, 0,
       0, 0, 0, -1, 0, 0, 0,  10, 0, 0, 0,  0, 0, 0},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, 0,  0,  0,
       0,  0,  0,  -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
       -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
       -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
       -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 50, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, 10, 0,
       0,  10, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 50, -1},
      {-1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1},
      {-1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1},
      {-1, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1},
      {-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
       10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};

  int numberOfDotsRemaining;

 public:
  bool valid(int x, int y);

  void zeroPosition(int x, int y);

  void debugMatrix();

  Maze();
};

#endif
