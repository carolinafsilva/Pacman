#ifndef MAZE_H
#define MAZE_H

#define BLOCK_L 31
#define BLOCK_C 28

#include "opengl.hpp"
#include <iostream>
#include <math.h>

class Maze {
 private:
  int matrix[BLOCK_L][BLOCK_C] = {
      {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 50, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 50, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
       10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 0,  -1,
       -1, 0,  -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 0,  -1,
       -1, 0,  -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -2,
       -2, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, 0,  0,  0,
       0,  0,  0,  -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {0, 0, 0, 0,  0, 0, 10, 0,  0, 0, -1, 0, 0, 0,
       0, 0, 0, -1, 0, 0, 0,  10, 0, 0, 0,  0, 0, 0},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, 0,  0,  0,
       0,  0,  0,  -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
       -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  0,  0,  0,  0,
       0,  0,  0,  0,  0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
       -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
       -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1},
      {-1, 50, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, 10, 0,
       0,  10, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 50, -1},
      {-1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1},
      {-1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
       -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1},
      {-1, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, -1,
       -1, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, -1},
      {-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1},
      {-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1,
       -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1},
      {-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
       10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1},
      {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};
  int numberOfDotsRemaining;

  void eat(glm::vec3 position);

 public:
  bool valid(glm::vec3 position);

  glm::vec2 Up(glm::vec3 position);
  glm::vec2 Left(glm::vec3 position);
  glm::vec2 Down(glm::vec3 position);
  glm::vec2 Right(glm::vec3 position);

  glm::vec2 getCenter(glm::vec3 position);

  float euclidianDist(glm::vec3 position1, glm::vec3 position2);

  void movePacman(glm::vec3 position);

  void moveGhost(glm::vec3 position);

  Maze();
};

#endif
