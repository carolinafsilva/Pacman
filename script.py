X = 31
Y = 28

original = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1,
     -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1],
    [-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
     -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1],
    [-1, 50, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
     -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 50, -1],
    [-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
     -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1],
    [-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
     10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1],
    [-1, 10, -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
     -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1, 10, -1],
    [-1, 10, -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
     -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1, 10, -1],
    [-1, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, -1,
     -1, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 0,  -1,
     -1, 0,  -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 0,  -1,
     -1, 0,  -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -2,
     -2, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, 0,  0,  0,
     0,  0,  0,  -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [0, 0, 0, 0,  0, 0, 10, 0,  0, 0, -1, 0, 0, 0,
     0, 0, 0, -1, 0, 0, 0,  10, 0, 0, 0,  0, 0, 0],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, 0,  0,  0,
     0,  0,  0,  -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
     -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
     -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 10, -1, -1, 0,  -1, -1, -1, -1,
     -1, -1, -1, -1, 0,  -1, -1, 10, -1, -1, -1, -1, -1, -1],
    [-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1,
     -1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1],
    [-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
     -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1],
    [-1, 10, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, 10, -1,
     -1, 10, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, 10, -1],
    [-1, 50, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, 10, 0,
     0,  10, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 50, -1],
    [-1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
     -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1],
    [-1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1, -1,
     -1, -1, -1, -1, 10, -1, -1, 10, -1, -1, 10, -1, -1, -1],
    [-1, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, -1,
     -1, 10, 10, 10, 10, -1, -1, 10, 10, 10, 10, 10, 10, -1],
    [-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1,
     -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1],
    [-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1,
     -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1],
    [-1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
     10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
]

# Create new
new = []
for i in range(X):
    for x in range(8):
        new.append([])
        for j in range(Y):
            for y in range(8):
                new[(i * 8) + x].append(0)

# Multiply by 8
for i in range(X):
    for r in range(8):
        for j in range(Y):
            for c in range(8):
                new[(i * 8) + r][(j * 8) + c] = original[i][j]


# check if valid wall or door
def terrain(r: int, c: int):
    return r >= 0 and r < X and c >= 0 and c < Y \
        and (original[r][c] == -1 or original[r][c] == -2)


# Remove excess
for i in range(X):
    for j in range(Y):
        # skip walls and door
        if original[i][j] == -1 or original[i][j] == -2:
            continue
        # shrink 2 pixels around
        if original[i][j] == 10:
            for r in range(8):
                for c in range(8):
                    if r <= 2 or r >= 5:
                        new[(i * 8) + r][(j * 8) + c] = 0
                    elif c <= 2 or c >= 5:
                        new[(i * 8) + r][(j * 8) + c] = 0
        # not ghost house
        if not (i >= 12 and i <= 16 and j >= 10 and j <= 17):
            # left
            if terrain(i, j - 1):
                for r in range(8):
                    for c in range(8):
                        if c >= 4:
                            new[i * 8 + r][(j - 1) * 8 + c] = 0
            # down
            if terrain(i + 1, j):
                for r in range(8):
                    for c in range(8):
                        if r <= 3:
                            new[(i + 1) * 8 + r][j * 8 + c] = 0
            # up
            if terrain(i - 1, j):
                for r in range(8):
                    for c in range(8):
                        if r >= 4:
                            new[(i - 1) * 8 + r][j * 8 + c] = 0
            # right
            if terrain(i, j + 1):
                for r in range(8):
                    for c in range(8):
                        if c <= 3:
                            new[i * 8 + r][(j + 1) * 8 + c] = 0
            # bottom-left
            if terrain(i + 1, j - 1):
                for r in range(8):
                    for c in range(8):
                        if c >= 4 and r <= 3:
                            new[(i + 1) * 8 + r][(j - 1) * 8 + c] = 0
            # bottom-right
            if terrain(i + 1, j + 1):
                for r in range(8):
                    for c in range(8):
                        if c <= 3 and r <= 3:
                            new[(i + 1) * 8 + r][(j + 1) * 8 + c] = 0
            # top-left
            if terrain(i - 1, j - 1):
                for r in range(8):
                    for c in range(8):
                        if c >= 4 and r >= 4:
                            new[(i - 1) * 8 + r][(j - 1) * 8 + c] = 0
            # top-right
            if terrain(i - 1, j + 1):
                for r in range(8):
                    for c in range(8):
                        if c <= 3 and r >= 4:
                            new[(i - 1) * 8 + r][(j + 1) * 8 + c] = 0

# print to file
with open('matrix', 'w') as f:
    print('int matrix[BOARD_X][BOARD_Y] = {', file=f)
    firstRow = True
    for row in new:
        if firstRow:
            print('  {', file=f, end='')
            firstRow = False
        else:
            print(',\n  {', file=f, end='')
        firstCol = True
        for col in row:
            if firstCol:
                print(f'{col}', file=f, end='')
                firstCol = False
            else:
                print(f', {col}', file=f, end='')
        print('}', file=f, end='')
    print('\n};', file=f)

# print to stdout
for row in new:
    for col in row:
        if col == -1:
            print(f'\033[0;34m{col:3}\033[0m ', end='')
        elif col == -2:
            print(f'\033[0;33m{col:3}\033[0m ', end='')
        elif col == 0 or col == 10:
            print(f'\033[0;32m{col:3}\033[0m ', end='')
        elif col == 50:
            print(f'\033[0;31m{col:3}\033[0m ', end='')
    print()
